#!/bin/bash

_THIS_NAME="$(basename ${BASH_SOURCE[0]})"
_THIS_DIR="$(dirname ${BASH_SOURCE[0]})"
_RUN_DIR="$(pwd)"
cd "$_THIS_DIR"; _THIS_DIR="$(pwd)"; cd "$_RUN_DIR"
_THIS_PATH="$_THIS_DIR/$_THIS_NAME"

usage() {
    cat <<EOF >&2

$_THIS_NAME - Convert Python script(s) to single file executable(s)

Usage: $_THIS_NAME [-v] [-n] [-D docker_tag] SCRIPT ...

Arguments:

 -h  Display this help screen.

 -n  Perform dry run --Display commands without running them.

 -v Display more verbose messages.

 -D docker_tag
    Docker image tag for running in a custom environment.

Optionally use a Docker container, e.g. running an older OS for backward
compatibility.

Leaves generated executable(s) in a "dist" subdirectory and intermediate
files in "build" and "spec" subdirectories.

EOF
}

_DRYRUN=no
_VERBOSE_OPT=
_DOCKER_TAG=
_SCRIPTS=
while getopts hnvD: opt
do
    case "$opt" in
      D)  _DOCKER_TAG="$OPTARG";;
      n)  _DRYRUN=yes;;
      v)  _VERBOSE_OPT=-v;;
      h) usage && exit 0;;
      \?) usage && exit 1;; # unknown flag
    esac
done

set -e

_run() {
    if [ "$_DRYRUN" != "yes" ]; then
        eval "$@"
    else
        echo "RUN: $@" 1>&2
    fi
}

shift `expr $OPTIND - 1`
if [[ $# == 0 ]]; then
    usage
    exit 1
fi

if [ -n "$_DOCKER_TAG" ]; then
    _run docker run -it --rm -v /:/freeze -w "/freeze$(pwd)" $_DOCKER_TAG "/freeze/$_THIS_PATH" $_VERBOSE_OPT "$@"
    exit $?
fi

for _PROG in "$@"; do
    [ -n "$_VERBOSE_OPT" ] && echo "Freezing script: $_PROG"
    if [ -e "$_PROG" ]; then
        _run pushd "$(dirname $_PROG)" > /dev/null
        _run pyinstaller -p $PWD/ext/python_misc -F --specpath $PWD/spec $_PROG
        _run popd > /dev/null
    else
        echo "ERROR: Script does not exist: $_PROG" 1>&2
    fi
done
