#!/usr/bin/env python3
# Copyright 2016-17 Steven Cooper
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Utility to simplify creating a sparse bundle, with additional options."""

import sys
import os
from getpass import getpass
from subprocess import Popen, PIPE

SCRIPT = os.path.basename(sys.argv[0])


def usage():
    """Display usage message."""
    print('''
Usage {script} NAME SIZE BANDSIZE [ENCRYPTION]

    NAME        volume name
    SIZE        hdiutil-compatible size, e.g. 100g
    BANDSIZE    band size in MB, e.g. 128 (Apple default is 8)
    ENCRYPTION  encryption bits: 128, 256 or empty for no encryption

    Prompts for a password if encryption is specified. Use 128 MB band size to
    improve Airport Extreme Time Capsule network throughput with small files.
'''.format(script=SCRIPT))
    sys.exit(255)


def get_password():
    """Prompt for and return password from user."""
    while True:
        pw1 = getpass('Password: ')
        pw2 = getpass('   Again: ')
        if pw2 == pw1:
            return pw1
        print('Passwords do not match.')


def main():
    """Main function."""
    if len(sys.argv) < 3:
        usage()
    name_arg = sys.argv[1]
    size_arg = sys.argv[2]
    band_size_arg = sys.argv[3]
    ebits_arg = sys.argv[4] if len(sys.argv) > 3 else None
    ebits = None
    if ebits_arg:
        try:
            ebits = int(ebits_arg)
        except ValueError:
            ebits = -1
        if ebits != 128 and ebits != 256:
            usage()
    try:
        band_size = int(band_size_arg)
        cmd_args = [
            'hdiutil', 'create',
            '-layout', 'GPTSPUD',
            '-size', size_arg,
            '-type', 'SPARSEBUNDLE',
            '-nospotlight',
            '-volname', name_arg,
            '-fs', 'Journaled HFS+',
            '-imagekey', 'sparse-band-size=%d' % (band_size * 2048),
        ]
        kwargs = dict(bufsize=0)
        if ebits:
            cmd_args.extend(['-encryption', 'AES-%d' % ebits, '-stdinpass'])
            kwargs['stdin'] = PIPE
            password = get_password()
        else:
            password = None
        cmd_args.append('%s.sparsebundle' % name_arg)
        proc = Popen(cmd_args, **kwargs)
        proc.communicate(password)
    except ValueError:
        usage()


if __name__ == '__main__':
    main()
