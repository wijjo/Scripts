#!/usr/bin/env python
# Copyright 2016-17 Steven Cooper
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Password Hasher module and runnable script."""

# Author: Steve Cooper
# License: Mozilla
# Created: 01/04/11
#
# SHA1 code based on:
# A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
# in FIPS PUB 180-1
# Version 2.1a Copyright Paul Johnston 2000 - 2002.
# Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
# Distributed under the BSD License
# See http://pajhome.org.uk/crypt/md5 for details.

import optparse #pylint: disable=deprecated-module

#pylint: disable=import-error,unused-import
from lib import import_scriptbase
from scriptbase.passhash import generate_hash_word, log

class TestResults(object):
    """Total/passed/failed test results."""

    def __init__(self):
        self.total = self.passed = self.failed = 0


class Tester(object):
    """Test driver."""

    def __init__(self):
        """Test driver constructor."""
        self.total = self.passed = self.failed = 0

    def run_test(   #pylint: disable=too-many-arguments
            self,
            site_tag,
            master_key,
            hash_word_size,
            require_digit,
            require_punctuation,
            require_mixed_case,
            restrict_special,
            restrict_digits,
            expect
    ):
        """Run a single test."""
        self.total += 1
        print('=== Test %d ===' % self.total)
        log.dump(0, {"tag,key,options": (site_tag,
                                         master_key,
                                         require_digit,
                                         require_punctuation,
                                         require_mixed_case,
                                         restrict_special,
                                         restrict_digits,
                                         hash_word_size)})
        result = generate_hash_word(site_tag,
                                    master_key,
                                    hash_word_size,
                                    require_digit,
                                    require_punctuation,
                                    require_mixed_case,
                                    restrict_special,
                                    restrict_digits)
        if result == expect:
            log.dump(0, {"result *PASS*": result})
            self.passed += 1
        else:
            log.dump(0, {"result *FAIL*": (result, "expect=" + expect)})
            self.failed += 1
        log.flush()


def test():
    """Run all tests."""
    log.verbosity = 1
    tester = Tester()
    tester.run_test("abcdef", "ghijkl", 8, 0, 0, 0, 0, 0, "2T0SYXf1")
    tester.run_test("abcdefgh", "987654321", 16, 0, 0, 0, 0, 0, "DiLlvt4zp8KtHoFY")
    tester.run_test("aaaa", "bbbb", 6, 0, 0, 1, 0, 0, "DCi393")
    tester.run_test("aaaa", "bbbb", 6, 0, 1, 1, 0, 0, '"Ci393')
    tester.run_test("cccc", "bbbb", 4, 0, 0, 0, 0, 0, 'pNKi')
    tester.run_test("cccc", "bbbb", 4, 1, 0, 0, 0, 0, 'pNK2')
    tester.run_test("zyxwvuts", "abcdefghi", 12, 0, 0, 0, 0, 0, 'T5eB8F/J2ghv')
    tester.run_test("zyxwvuts", "abcdefghi", 12, 0, 0, 0, 1, 0, 'T5eB8FOJ2ghv')
    tester.run_test("zyxwvuts", "abcdefghi", 12, 0, 0, 0, 0, 1, '857080182482')
    print('=== Summary ===')
    log.dump(0, Total=tester.total)
    log.dump(0, Passed=tester.passed)
    log.dump(0, Failed=tester.failed)


def main():
    """Main function."""
    parser = optparse.OptionParser()
    parser.set_usage('%prog [OPTIONS] domain password')
    parser.add_option('-a', '--alphanumeric', dest='alphanumeric', action='store_true',
                      help='allow only alpha-numeric characters')
    parser.add_option('-d', '--digit', dest='digit', action='store_true',
                      help='require at least one digit')
    parser.add_option('-l', '--length', dest='length', action='store', type='int',
                      help='length of generated hash word')
    parser.add_option('-m', '--mixedcase', dest='mixedcase', action='store_true',
                      help='require a mix of upper and lower case')
    parser.add_option('-n', '--numeric', dest='numeric', action='store_true',
                      help='create numeric code, e.g. for PIN')
    parser.add_option('-p', '--punctuation', dest='punctuation', action='store_true',
                      help='require at least one punctuation character')
    parser.add_option('-t', '--test', dest='test', action='store_true',
                      help='run self test sequence')
    (options, args) = parser.parse_args()
    if len(args) != 2 and not options.test:
        parser.error('Exactly 2 arguments are required for domain and password unless -t is used')
    if not options.length:
        options.length = 8
    if options.test:
        test()
    else:
        result = generate_hash_word(args[0],
                                    args[1],
                                    options.length,
                                    options.digit,
                                    options.punctuation,
                                    options.mixedcase,
                                    options.alphanumeric,
                                    options.numeric)
        print(result)

if __name__ == '__main__':
    main()
