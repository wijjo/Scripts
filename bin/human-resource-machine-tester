#!/usr/bin/env python3

import sys
import os
from argparse import ArgumentParser
import yaml
import copy
import inspect
import collections


# Make YAML use ordered dictionaries so that code blocks are ordered.
# http://stackoverflow.com/questions/5121931/in-python-how-can-you-load-yaml-mappings-as-ordereddicts
def dict_constructor(loader, node):
    return collections.OrderedDict(loader.construct_pairs(node))
yaml.add_constructor(yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, dict_constructor)


NUM_REGISTERS = 10

class CompileError(Exception):
    pass


class CompilerInternalError(Exception):
    pass


class RunError(Exception):
    pass


class InboxEmpty(Exception):
    pass


def _instruction_trace_string(line_num, instruction):
    sline_num = '(%d)' % line_num
    sargs = ' '.join(['{}'.format(arg) for arg in instruction.args])
    return '%6s %s %s' % (sline_num, instruction.op, sargs)


class InstructionSet:

    @staticmethod
    def INBOX(machine_state):
        machine_state.write_current(machine_state.read_inbox())

    @staticmethod
    def OUTBOX(machine_state):
        machine_state.write_outbox(machine_state.read_current())
        machine_state.clear_current()

    @staticmethod
    def COPY_TO(machine_state, register):
        machine_state.write_register(register, machine_state.read_current())

    @staticmethod
    def COPY_FROM(machine_state, register):
        machine_state.write_current(machine_state.read_register(register))

    @staticmethod
    def ADD(machine_state, register):
        machine_state.write_current(
            machine_state.read_current_int() + machine_state.read_register_int(register))

    @staticmethod
    def SUB(machine_state, register):
        machine_state.write_current(
            machine_state.read_current_int() - machine_state.read_register_int(register))

    @staticmethod
    def BUMP(machine_state, increment, register):
        machine_state.write_register(register,
            machine_state.read_register_int(register) + increment)

    @staticmethod
    def JUMP(machine_state, location):
        machine_state.jump_to_location(location)

    @staticmethod
    def JUMP_IF_ZERO(machine_state, location):
        if machine_state.read_current_int() == 0:
            machine_state.jump_to_location(location)

    @staticmethod
    def JUMP_IF_NEGATIVE(machine_state, location):
        if machine_state.read_current_int() < 0:
            machine_state.jump_to_location(location)


class Program:
    def __init__(self):
        self.instructions = []


class Instruction:
    def __init__(self, op, func, args):
        self.op = op
        self.func = func
        self.args = args
    def execute(self, machine_state):
        return self.func(machine_state, *self.args)
    def __str__(self):
        return ' '.join([self.op] + ['{}'.format(arg) for arg in self.args])


class CompilerState:
    def __init__(self):
        self.block = None
        self.line_index = None


class Compiler:

    def __init__(self, num_registers, instruction_set, blocks):
        self.num_registers = num_registers
        self.instruction_set = instruction_set
        self.blocks = blocks
        self.state = CompilerState()
        self.program = Program()

    def compile(self):
        try:
            for self.state.block in self.blocks:
                self._compile_current_block()
        except CompileError as e:
            print('COMPILE ERROR at %s.%d "%s": %s' % (
                        self.state.block.label,
                        self.state.line_index + 1,
                        self.state.block.lines[self.state.line_index],
                        str(e)))
            return None
        except CompilerInternalError as e:
            print('COMPILER INTERNAL ERROR at %s.%d "%s": %s' % (
                        self.state.block.label,
                        self.state.line_index + 1,
                        self.state.block.lines[self.state.line_index],
                        str(e)))
            return None
        return self.program

    def _compile_current_block(self):
        block = self.state.block
        print('%s:' % block.label)
        for self.state.line_index in range(len(block.lines)):
            self._compile_line(block.lines[self.state.line_index])

    def _compile_line(self, line):
        fields = line.split()
        op = fields[0].upper()
        compile_args = fields[1:]
        function = getattr(self.instruction_set, op, None)
        if not function:
            raise CompileError('Bad operation: %s' % op)
        signature_args = [key for key in inspect.signature(function).parameters]
        if not signature_args or signature_args[0] != 'machine_state':
            raise CompilerInternalError(
                'Instruction set first parameter must be "machine_state"')
        if len(compile_args) != len(signature_args) - 1:
            raise CompileError('Expect argument(s): %s' % ' '.join(signature_args[1:]))
        args = []
        for i in range(len(signature_args) - 1):
            arg_name = signature_args[i + 1]
            if arg_name == 'register':
                value = self._get_register_num(compile_args[i])
            elif arg_name == 'increment':
                value = self._get_increment(compile_args[i])
            elif arg_name == 'location':
                value = self._get_location(compile_args[i])
            else:
                value = compile_args[i]
            args.append(value)
        instruction = Instruction(op, function, args)
        self.program.instructions.append(instruction)
        print(_instruction_trace_string(len(self.program.instructions), instruction))

    def _get_register_num(self, reg):
        try:
            reg_num = int(reg)
        except TypeError:
            raise CompileError('Register is not a number: %s' % reg)
        if reg_num < 0 or reg_num >= self.num_registers:
            raise CompileError('Bad register: #%d' % reg_num)
        return reg_num

    def _get_increment(self, increment):
        if increment == '-1':
            return -1
        if increment == '+1':
            return 1
        raise CompileError('BUMP increment must be -1 or +1')

    def _get_location(self, label):
        line_index = 0
        for block in self.blocks:
            if block.label == label:
                return line_index + 1
            line_index += len(block.lines)
        raise CompileError('Unknown block label "%s"' % label)


class MachineState:

    def __init__(self, program, inbox, num_registers):
        self.program = program
        self.current_value = None
        self.inbox = copy.copy(inbox)
        self.outbox = []
        self.registers = [None] * num_registers
        self.instruction_index = 0
        self.step_counter = 0
        self.instruction_index_before = None

    def read_current(self):
        if self.current_value is None:
            raise RunError('No current value')
        return self.current_value

    def read_current_int(self):
        try:
            return int(self.read_current())
        except ValueError:
            raise RunError('Current value is not an integer')

    def write_current(self, value):
        if value is None:
            raise RunError('Current value can not be set to empty')
        self.current_value = '{}'.format(value)

    def clear_current(self):
        self.current_value = None

    def read_register(self, reg_num):
        value = self.registers[reg_num]
        if value is None:
            raise RunError('No value to read from register: #%d' % reg_num)
        return value

    def read_register_int(self, reg_num):
        svalue = self.read_register(reg_num)
        try:
            return int(svalue)
        except ValueError:
            raise RunError('Value is not an integer: %s' % svalue)

    def write_register(self, reg_num, value):
        if value is None:
            raise RunError('No value to write to register: #%d' % reg_num)
        self.registers[reg_num] = '{}'.format(value)

    def read_inbox(self):
        if not self.inbox:
            self.finish()
            raise InboxEmpty('Inbox is empty')
        return self.inbox.pop(0)

    def write_outbox(self, value):
        self.outbox.append(value)

    def jump_to_location(self, location):
        if location <= 0 or location > len(self.program.instructions):
            raise RunError('Bad jump location %d, expect 1-%d' % (location, len(self.program.instructions)))
        self.instruction_index = location - 1

    def before_instruction(self):
        self.instruction_index_before = self.instruction_index

    def after_instruction(self):
        # If it wasn't a jump move to the next instruction.
        if self.instruction_index == self.instruction_index_before:
            self.instruction_index += 1
        self.step_counter += 1

    def finish(self):
        self.instruction_index = len(self.program.instructions)

    def running(self):
        return self.instruction_index < len(self.program.instructions)

    def trace_string(self):
        return 'c({})  r{}  i{}  o{}'.format(
            self.value_string(self.current_value),
            self.value_string(self.registers),
            self.value_string(self.inbox),
            self.value_string(self.outbox))

    @classmethod
    def value_string(cls, value):
        if type(value) is list or type(value) is tuple:
            return '({})'.format(' '.join([cls.value_string(v) for v in value]))
        return '-' if value is None else '{}'.format(value)

    def current_instruction(self):
        return self.program.instructions[self.instruction_index]

    def current_instruction_string(self):
        return _instruction_trace_string(self.instruction_index + 1, self.current_instruction())

    def get_summary(self):
        class Summary:
            def __init__(self, outbox, num_instructions, step_counter):
                self.outbox = copy.copy(outbox)
                self.num_instructions = num_instructions
                self.step_counter = step_counter
        return Summary(self.outbox, len(self.program.instructions), self.step_counter)


class Machine:

    def __init__(self, inbox, num_registers, instruction_set, program, trace=False):
        self.instruction_set = instruction_set
        self.trace = trace
        self.state = MachineState(program, inbox, num_registers)

    def step(self):
        '''
        Execute current instruction, return Summary object when done or None to continue.
        '''
        try:
            if self.trace:
                print(self.state.trace_string())
                print(self.state.current_instruction_string())
            self.state.before_instruction()
            self.state.current_instruction().execute(self.state)
            self.state.after_instruction()
        except InboxEmpty:
            pass

    def run(self):
        try:
            while self.state.running():
                self.step()
            return self.state.get_summary()
        except RunError as e:
            print('RUN ERROR: %s: %s' % (str(e), self.state.current_instruction_string()))


class Solution:
    def __init__(self, name, inbox, outbox, blocks):
        self.name = name
        self.inbox = inbox
        self.outbox = outbox
        self.blocks = blocks


class CodeBlock:
    def __init__(self, label, lines):
        self.label = label
        self.lines = lines


def box_string(box):
    return '(%s)' % (' '.join([str(item) for item in box]))


def test_solution(solution, trace=False):

    print('=== Solution: %s ===' % solution.name)

    print('Compiling...')
    compiler = Compiler(NUM_REGISTERS, InstructionSet, solution.blocks)
    program = compiler.compile()
    if not program:
        return False

    print('Running...')
    machine = Machine(solution.inbox, NUM_REGISTERS, InstructionSet, program, trace=trace)
    summary = machine.run()

    if summary:
        print('-- Summary:')
        def summarize(label, value):
            print('%12s: %s' % (label, value))
        summarize('Instructions', summary.num_instructions)
        summarize('Steps', summary.step_counter)
        summarize('Outbox', box_string(summary.outbox))
        if summary.outbox == solution.outbox:
            summarize('Result', 'PASSED')
            return True
        summarize('Expected', box_string(solution.outbox))
        summarize('Result', 'FAILED')
        return False


def test(path, names, trace):
    with open(path) as f:
        cfg = yaml.load(f)
    if not names:
        names = sorted(cfg.keys())
    for name in names:
        if name in cfg:
            sol = cfg[name]
            # It will be None if the YAML key is empty.
            if sol is None:
                sol = {}
            missing = [key for key in ['inbox', 'outbox', 'code'] if key not in sol]
            if not missing:
                inbox = sol['inbox'].split()
                outbox = sol['outbox'].split()
                # Code must be a series of labeled lists
                blocks = []
                for label in sol['code']:
                    blocks.append(CodeBlock(label, sol['code'][label]))
                solution = Solution(name, inbox, outbox, blocks)
                return test_solution(solution, trace=trace)
            else:
                print('Missing solution key%s: %s'
                            % ('s' if len(missing) > 1 else '', ' '.join(missing)))
                return False
        else:
            print('Solution not found: %s' % name)
            return False


if __name__ == '__main__':
    parser = ArgumentParser(description='Compile and run Human Resource Machine programs.')
    parser.add_argument('-t', '--trace', dest='trace', action='store_true',
                        default=False, help='trace execution')
    parser.add_argument(dest='targets', nargs='+', help='target path[:label1[:label2...]]')
    args = parser.parse_args()
    for target in args.targets:
        components = target.strip().split(':')
        if components:
            test(components[0], components[1:], args.trace)
