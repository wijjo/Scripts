#!/usr/bin/env python

import sys
import os
import time
import zipfile

from lib import import_scriptbase
from scriptbase import cli, git, console, run, utility


#===============================================================================
@cli.Main(
    description='Assorted higher level commands for working in a Git environment.',
    support_verbose=True,
    support_dryrun=True,
    support_pause=True,
)
#===============================================================================
def _main(runner):
    console.set_verbose(runner.cmdargs.verbose)


#===============================================================================
@cli.Command(
    aliases=['st'],
    description='Show pending changes and other status.',
    args=[
        cli.Boolean('short', 'short report, i.e. just changed files', '-s', '--short'),
        cli.Boolean('time', 'order by time instead of name', '-t', '--time'),
    ],
)
#===============================================================================
def status(runner):
    root_dir = git.git_project_root()
    save_dir = os.getcwd()
    os.chdir(root_dir)
    try:
        def _display(submodule=None):
            header_displayed = False
            def _header():
                url = git.get_repository_url()
                local = git.get_local_branch()
                tracking = git.get_tracking_branch()
                if submodule:
                    print 'Submodule: %s' % submodule
                print '''\
      URL: %(url)s
   Branch: %(local)s
   Tracks: %(local)s''' % locals()
            if not submodule and not runner.cmdargs.short:
                _header()
                header_displayed = True
            changes = git.get_changes_by_time() if runner.cmdargs.time else git.get_changes()
            for change in changes:
                path = change.path2 if change.path2 else change.path
                if not runner.cmdargs.short and not header_displayed:
                    _header()
                    header_displayed = True
                if runner.cmdargs.short:
                    print path
                else:
                    try:
                        col1 = time.strftime('%x  %X', time.localtime(os.stat(path).st_mtime))
                    except OSError:
                        col1 = '(deleted)'
                    print '%3s  %17s  %s' % (change.flag, col1, path)
        _display()
        for submodule in git.iter_submodules():
            os.chdir(submodule)
            _display(submodule)
            os.chdir(root_dir)
    finally:
        os.chdir(save_dir)


#===============================================================================
@cli.Command(
    description='Archive uncommitted changes and capture a patch diff.',
    args=[
        cli.Boolean('all', 'include unmanaged files in archive', '-a', '--all'),
        cli.String('output', 'output directory', '-o', '--output', default='../WIP'),
    ],
)
#===============================================================================
def snapshot(runner):

    root_dir = git.git_project_root()
    save_dir = os.getcwd()
    os.chdir(root_dir)

    root_name = os.path.basename(root_dir)
    branch_name = git.get_local_branch().replace('/', '_')
    timestamp = time.strftime('%y%m%d-%H%M%S')
    output_name = '-'.join([timestamp, root_name, branch_name])
    output_dir = os.path.join(runner.cmdargs.output, output_name)
    zip_name = 'changed-and-new.zip' if runner.cmdargs.all else 'changed.zip'
    zip_path = os.path.join(output_dir, zip_name)
    zip_path_abs = os.path.realpath(zip_path)
    diff_name = 'patch.diff'
    diff_path = os.path.join(output_dir, diff_name)
    diff_path_abs = os.path.realpath(diff_path)

    console.info('Base directory (Git project root):', [root_dir])
    console.info('Output directory:', [output_dir])

    if not runner.cmdargs.dryrun:
        os.makedirs(output_dir)

    try:

        file_paths = []

        console.info('Archive: %s' % zip_name)

        for change in git.iter_changes(submodules=True):
            if change.flag.startswith('R'):
                file_paths.append(change.path2)
            elif change.flag != 'D' and change.path != zip_path_abs:
                if runner.cmdargs.all or change.flag != '??':
                    if runner.cmdargs.dryrun:
                        sys.stdout.write('+%s%s' % (change.path, os.linesep))
                    file_paths.append(change.path)

        if not file_paths:
            console.info('Nothing to archive: %s' % root_name)

        if not runner.cmdargs.dryrun and file_paths:
            zip_file = zipfile.ZipFile(zip_path_abs, 'w', zipfile.ZIP_DEFLATED)
            for path in file_paths:
                if runner.cmdargs.verbose:
                    sys.stdout.write('+%s%s' % (path, os.linesep))
                zip_file.write(path)
            zip_file.close()

        console.info('Patch diff: %s' % diff_name)

        if not runner.cmdargs.dryrun:
            with open(diff_path_abs, 'w') as diff_file:
                for line in run.pipe_cmd('git', 'diff'):
                    diff_file.write(line)
                    diff_file.write(os.linesep)

    finally:
        os.chdir(save_dir)


#===============================================================================
@cli.Command(
    description='Make a new branch.',
    args=[
        cli.String('ancestor', 'ancestor branch name', '-a', default=None),
        cli.String('branch', 'branch name'),
    ],
)
#===============================================================================
def new(runner):
    folder = runner.cmdargs.branch
    runner.update(folder=folder)
    runner.shell('git fetch')
    runner.shell('git checkout master')
    runner.shell('git pull')
    git.create_branch(None,
                      runner.cmdargs.branch,
                      runner.cmdargs.ancestor,
                      create_remote=True,
                      dryrun=runner.cmdargs.dryrun,
                      verbose=runner.cmdargs.verbose)


#===============================================================================
@cli.Command(
    description='List my branches and unmerged commits.',
)
#===============================================================================
def branches(runner):
    info = git.get_info()
    for branch in git.iter_branches(user = info.user.name):
        sys.stdout.write('%s%s' % (branch, os.linesep))
        for commit in git.iter_unmerged_commits(branch):
            sys.stdout.write('   %s %s%s' % (commit.identifier, commit.comment, os.linesep))


#===============================================================================
@cli.Command(
    description='Rename local and remote branch.',
    args=[
        cli.String('remotename', 'remote branch name, if different from local', '-r'),
        cli.String('branch', 'branch name'),
    ],
)
#===============================================================================
def rename(runner):
    newlocal = runner.cmdargs.branch
    if runner.cmdargs.remotename:
        newremote = runner.cmdargs.remotename
    else:
        newremote = newlocal
    for s in run.pipe_cmd('git', 'status'):
        if s.startswith('# On branch '):
            oldbranch = s[12:]
            break
    else:
        console.abort('Not in a GitHub-managed folder.')
    runner.update(newlocal=newlocal, newremote=newremote, oldbranch=oldbranch)
    runner.shell('git branch -m %(oldbranch)s %(newlocal)s')
    runner.shell('git push origin %(newremote)s')
    runner.shell('git branch --set-upstream %(newlocal)s origin/%(newremote)s')


#===============================================================================
@cli.Command(
    description='Submit a pull request for review.',
    args=[
        cli.String('title', 'pull request title'),
    ],
)
#===============================================================================
def review(runner):
    tracking_branch = git.get_tracking_branch()
    branch = tracking_branch.split('/')[1]
    if not utility.find_executable('hub'):
        console.abort('The hub command must be installed. (http://defunkt.io/hub/)',
                      'OS X Homebrew command: brew install hub')
    runner.shell('hub pull-request "%s" -b %s' % (runner.cmdargs.title, branch))


#===============================================================================
@cli.Command(
    description='Display the repository URL.',
    args=[
    ],
)
#===============================================================================
def url(runner):
    print git.get_repository_url()


#===============================================================================
if __name__ == '__main__':
#===============================================================================
    cli.main()
