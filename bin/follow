#!/usr/bin/env python
################################################################################
# Follow and colorize command output
################################################################################

import sys
import os
import re
import subprocess
import shutil
try:
    import json
except ImportError:
    json = None

#==============================================================================

BLACK   = 0
RED     = 1
GREEN   = 2
YELLOW  = 3
BLUE    = 4
MAGENTA = 5
CYAN    = 6
WHITE   = 7

class Style(object):
    def __init__(self, name, fg = None, bg = None, bold = False, hide = False, marker = None):
        self.name   = name
        self.fg     = fg
        self.bg     = bg
        self.bold   = bold
        self.hide   = hide
        self.marker = marker

class Scanner(object):
    def __init__(self, pattern, style):
        self.matcher = re.compile(pattern)
        self.style   = style
        self.index   = None

class Colorizer(object):
    def __init__(self, names = [], *scanners):
        if type(names) not in (list, tuple):
            self.names = (names,)
        else:
            self.names = names
        self.scanners = scanners
        index = 0
        for scanner in self.scanners:
            index += 1
            scanner.index = index

class Global:

    # Default styles that are written to the user configuration.
    default_styles = dict(
        DEFAULT = Style('Default', fg = WHITE),
        ADMIN   = Style('Admin', fg = WHITE, bg = BLUE, bold = True),
        DEBUG   = Style('Debug', fg = BLUE),
        INFO    = Style('Info', fg = GREEN, bold = True),
        ERROR   = Style('Error', fg = RED, bold = True, marker = 'ERROR'),
        GOOD    = Style('Good', fg = MAGENTA, bold = True),
        BAD     = Style('Bad', fg = RED, bold = True),
        WARNING = Style('Warning', fg = YELLOW, bold = True),
        SECTION = Style('Section', fg = MAGENTA, bold = True),
        HEADING = Style('Heading', fg = CYAN, bold = True),
        SUCCESS = Style('Success', fg = GREEN, bg = YELLOW, bold = True, marker = 'FAILURE'),
        FAILURE = Style('Failure', fg = RED, bg = YELLOW, bold = True),
        HIDE    = Style('Hide', hide = True)
    )

    # This gets read from the user configuration
    colorizers = []
    styles     = {}

    # Filled in when we know
    script_name = os.path.basename(sys.argv[0])
    script_dir = os.path.dirname(os.path.realpath(sys.argv[0]))
    lib_dir = os.path.join(script_dir, '%slib' % script_name)
    output_directory = ('.%s' % script_name)
    config_path = os.path.expanduser('~/.%src' % script_name)
    sys.path.insert(0, lib_dir)
    from lib.follow.defaultrc import default_rc_text

def _message(f, tag, *msgs):
    '''Low level message display.'''
    if tag:
        stag = '%8s: ' % tag
    else:
        stag = ''
    for msg in msgs:
        if msg is not None:
            # Handle exceptions
            if issubclass(msg.__class__, Exception):
                f.write('%s%s Exception: %s\n' % (stag, msg.__class__.__name__, str(msg)))
            else:
                # Handle multi-line strings
                try:
                    t = msg + ' '   # Throws exception if not string
                    for msg2 in msg.split('\n'):
                        f.write('%s%s\n' % (stag, msg2))
                except TypeError:
                    if hasattr(msg, '__iter__'):
                        for msg2 in msg:
                            f.write('%s   %s\n' % (stag, msg2))
                    else:
                        f.write('%s%s\n' % (stag, str(msg)))

def warning(*msgs):
    _message(sys.stdout, 'WARNING', *msgs)

def abort(*msgs):
    _message(sys.stdout, 'FATAL', *msgs)
    sys.exit(1)

def get_colorizer(program):
    if program:
        name = os.path.basename(program)
        for colorizer in Global.colorizers:
            if name in colorizer.names:
                return colorizer
    return None

class CommandReader(object):
    def __init__(self, *args):
        self.args = args
        if len(args) > 1 and not args[1].startswith('-'):
            self.name = '_'.join(args[:2])
        else:
            self.name = args[0]
    def __iter__(self):
        try:
            proc = subprocess.Popen(self.args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            for line in iter(proc.stdout.readline, ''):
                yield line.rstrip()
            proc.stdout.close()
        except Exception, e:
            warning('Exception running command: %s' % ' '.join(self.args), e)

class Tailer(object):

    def __init__(self, options, reader, colorizer):
        self.options   = options
        self.reader    = reader
        self.colorizer = colorizer
        self.ftee      = None
        if not self.options.no_tee:
            path = os.path.join(Global.output_directory,
                                '%s.out' % os.path.basename(self.reader.name))
            try:
                self.ftee = open(path, 'w')
            except Exception, e:
                warning('Failed to open tee file "%s"' % path, e)

    def close(self):
        if self.ftee:
            self.ftee.close()

    def tail(self):
        for s in self.reader:
            for scanner in self.colorizer.scanners:
                if options.debug:
                    print '???', scanner.index, scanner.matcher.pattern, scanner.matcher.search(s)
                if scanner.matcher.search(s):
                    if options.verbose:
                        print('<match index=%d pattern="%s">'
                                    % (scanner.index, scanner.matcher.pattern))
                    if scanner.style in Global.styles:
                        style = Global.styles[scanner.style]
                    else:
                        warning('Style "%s" not found.' % scanner.style)
                        continue
                    if not style.hide:
                        ansi_line(sys.stdout, style, s)
                        if self.ftee:
                            if style.marker:
                                self.ftee.write('%s: ' % style.marker)
                            self.ftee.write('%s\n' % s)
                            self.ftee.flush()
                    break
            else:
                sys.stdout.write('%s\n' % s)
                if self.ftee:
                    self.ftee.write('%s\n' % s)
                    self.ftee.flush()

def ansi_line(f, style, s):
    a = []
    if style.fg:
        a.append('3%d' % style.fg)
        if style.bg is None:
            a.append('49')
    if style.bg:
        a.append('4%d' % style.bg)
    if style.bold:
        a.append('1')
    f.write('\x1b[%sm' % ';'.join(a))
    f.write(s)
    if a:
        f.write('\x1b[K\x1b[m')
    f.write('\n')
    f.flush()

def write_config_as_needed(rcgen):
    if rcgen or not os.path.exists(Global.config_path):
        if rcgen:
            print 'Generating configuration file "%s"...' % Global.config_path
        else:
            print 'Saving initial configuration file "%s"...' % Global.config_path
            with open(Global.config_path, 'w') as f:
                f.write(Global.default_rc_text)
                f.write('\n')

def read_config(styles, colorizers):
    if json:
        try:
            f = open(Global.config_path)
        except (IOError, OSError), e:
            abort('Failed to open configuration "%s" for reading.' % Global.config_path, e)
        try:
            try:
                s = f.read()
                doc = json.loads(s)
            except (IOError, OSError), e:
                abort('Failed to read configuration "%s".' % Global.config_path, e)
        finally:
            f.close()
    else:
        # Older Python versions don't have json. Use the default configuration.
        # Patch up the default configuration to use with Python eval.
        # Obviously these straight substitutions are simplistic and error-prone.
        config = Global.default_rc_text
        for (s1, s2) in (('true', 'True'), ('false', 'False'), ('null', 'None')):
            config = config.replace(s1, s2)
        doc = eval(config)
    for name in doc['styles']:
        jstyle = doc['styles'][name]
        styles[name] = Style(jstyle['name'], fg     = jstyle['fg'],
                                             bg     = jstyle['bg'],
                                             bold   = jstyle['bold'],
                                             hide   = jstyle['hide'],
                                             marker = jstyle['marker'])
    for jcolorizer in doc['colorizers']:
        names = jcolorizer['names']
        scanners = []
        for jscanner in jcolorizer['scanners']:
            scanners.append(Scanner(jscanner['pattern'], jscanner['style']))
        colorizers.append(Colorizer(names, *scanners))

def configure(options):
    '''Initialize the user configuration file as needed from which the
    colorizers get loaded.'''
    write_config_as_needed(options.rcgen)
    read_config(Global.styles, Global.colorizers)
    # Create the output directory as needed
    # TODO error handling
    if not options.no_tee and not os.path.exists(Global.output_directory):
        print 'Creating output directory "%s"...' % Global.output_directory
        os.mkdir(Global.output_directory)

#=========== Main ==============================================================

if __name__ == '__main__':
    from optparse import OptionParser
    option_parser = OptionParser(description = '\n'.join([
                                 "Follow, colorize, and capture a command's output.",
                                 'Writes output to "%s" directory.' % Global.output_directory]))
    option_parser.add_option('-c', '--colorizer', type='string', dest='colorizer',
                             help='specify colorizer name')
    option_parser.add_option('-f', '--file', action='store_true', dest='file',
                             help='arguments are files or directories to tail (like tail -f)')
    option_parser.add_option('-n', '--no-tee', action='store_true', dest='no_tee',
                             help='disable teeing (capturing) to output file')
    option_parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                             help='display verbose output')
    option_parser.add_option('-d', '--debug', action='store_true', dest='debug',
                             help='display extra verbose output for debugging')
    option_parser.add_option('-t', '--test', type='string', dest='test',
                             help='execute test using TEST data')
    option_parser.add_option('-r', '--rcgen', action='store_true', dest='rcgen',
                             help='regenerate new configuration file')
    (options, args) = option_parser.parse_args()
    configure(options)
    try:
        if options.test:
            import lib.follow.test
            for test in lib.follow.test.test_data:
                if test.name == options.test:
                    break
            else:
                abort('Could not find test "%s"' % options.test,
                      'Known tests: %s' % ' '.join([t.name for t in test_data]))
            reader = lib.follow.test.TestReader(test.name, test.text)
            options.colorizer = test.colorizer
        else:
            if len(args) > 0:
                reader = CommandReader(*args)
            else:
                option_parser.print_help()
                sys.exit(1)
        colorizer = get_colorizer(options.colorizer)
        if not colorizer:
            if options.colorizer:
                warning('Colorizer "%s" is not supported.' % options.colorizer)
            colorizer = get_colorizer(args[0])
            if colorizer is None:
                colorizer = Colorizer()
        tailer = Tailer(options, reader, colorizer)
        try:
            tailer.tail()
        finally:
            tailer.close()
    except KeyboardInterrupt:
        warning('Interrupted')

