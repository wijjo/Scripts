#!/usr/bin/env python3
# Copyright 2016-17 Steven Cooper
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Email a document to Kindle."""

import sys
import os
import smtplib
import email
import mimetypes
import imp


CONFIG_PATH = os.path.expanduser(os.path.join('~', '.kindle-send.py'))


class Abort(Exception):
    """Fatal error exception with message."""

    pass


def mutt_send(address, subject, body, *attachments):
    """Send email using mutt."""
    aargs = ''
    for attachment in attachments:
        aargs += ' -a "%s"' % attachment
    return_code = os.system('echo \'%s\' | mutt -s "%s"%s -- "%s"'
                            % (body, subject, aargs, address))
    if return_code != 0:
        raise Abort('Send command returned error code %d' % return_code)


def smtp_send(
        from_address,
        to_address,
        subject,
        body,
        *attachments):
    """Send email using SMTP."""
    msg = email.message.EmailMessage()
    msg['From'] = from_address
    msg['To'] = to_address
    msg['Date'] = email.Utils.formatdate(localtime=True)
    msg['Subject'] = subject
    msg.set_content(body)
    for attachment in attachments:
        if not os.path.isfile(attachment):
            raise Abort('File does not exist.' % attachment)
        ctype, encoding = mimetypes.guess_type(attachment)
        if ctype is None or encoding is not None:
            ctype = 'application/octet-stream'
        maintype, subtype = ctype.split('/', 1)
        with open(attachment, 'rb') as attachment_handle:
            msg.add_attachment(attachment_handle.read(),
                               maintype=maintype,
                               subtype=subtype,
                               filename=os.path.basename(attachment))
    with smtplib.SMTP('smtp.gmail.com', 587) as smtp_handle:
        smtp_handle.send_message(msg)


def import_configuration(config_path):
    """Import the configuration without a .pyc file getting generated."""
    # If it doesn't exist, generate an initial configuration.
    if not os.path.exists(CONFIG_PATH):
        print('"%s" missing - generating a sample...' % CONFIG_PATH)
        with open(CONFIG_PATH, 'w') as file_handle:
            file_handle.write('''\
# These are sample values. Please customize for your needs.
# Note that this is imported as a Python module.
to_addr = "LOGNAME@free.kindle.com"
from_addr = "LOGNAME@example.com"
smtp_user = "LOGNAME@example.com"
smtp_password = "password"
''')
        sys.exit(1)
    # If it exists, import and return the configuration module.
    try:
        save_dont_write_bytecode = sys.dont_write_bytecode
        sys.dont_write_bytecode = True
        with open(config_path) as file_handle:
            return imp.load_module('Config', file_handle, config_path,
                                   ('.py', 'r', imp.PY_SOURCE))
    finally:
        sys.dont_write_bytecode = save_dont_write_bytecode


def main():
    """Main function."""
    config = import_configuration(CONFIG_PATH)
    # Pre-check that all supplied document paths resolve to files.
    for doc in sys.argv[1:]:
        if not os.path.isfile(doc):
            raise Abort('"%s" does not exist' % doc)
    # Email each document to Kindle.
    for doc in sys.argv[1:]:
        ext = os.path.splitext(doc)[1]
        if ext.lower() in ('.mobi', '.azw'):
            print('Mailing "%s" to %s...' % (doc, config.to_addr))
            smtp_send(config.from_addr, config.to_addr, doc, 'Attached "%s"' % doc, doc)
        else:
            print('Mailing and converting "%s" to %s...' % (doc, config.to_addr))
            smtp_send(config.from_addr, config.to_addr, 'convert', 'Attached "%s"' % doc, doc)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(2)
    except ImportError as exc:
        sys.stderr.write('ERROR: Unable to load Config module (%s)\n   %s'
                         % (CONFIG_PATH, str(exc)))
        sys.exit(1)
    except Abort as exc:
        sys.stderr.write('ERROR: %s\n' % str(exc))
    except IOError as exc:
        sys.stderr.write('I/O ERROR: %s\n' % str(exc))
