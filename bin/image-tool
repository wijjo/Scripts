#!/usr/bin/env python3
# Copyright 2016-17 Steven Cooper
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Perform various image manipulations using ImageMagick."""

import argparse
import os
import glob
import re
import sys
from subprocess import run
from typing import Optional, Sequence

# Matches identity output without the file name at the front.
RE_IDENTIFY = re.compile(r'(\w+)\s+(\d+)x(\d+)\s+(\d+)x(\d+)[+](\d+)[+](\d+)\s+.*', re.IGNORECASE)


# noinspection DuplicatedCode
def info(message: str):
    sys.stdout.write(f'{message}{os.linesep}')


# noinspection DuplicatedCode
def error(message: str):
    sys.stderr.write(f'ERROR: {message}{os.linesep}')


# noinspection DuplicatedCode
def abort(message: str):
    sys.stderr.write(f'FATAL: {message}{os.linesep}')
    sys.exit(1)


class Chopper(object):
    """Image chopper."""

    def __init__(self, xgrid, ygrid, xoffset, yoffset, dry_run):  # pylint: disable=too-many-arguments
        """Chopper constructor."""
        self.xgrid = xgrid
        self.ygrid = ygrid
        self.xoffset = xoffset
        self.yoffset = yoffset
        self.dry_run = dry_run

    @classmethod
    def identify(cls, path):
        """Identify an image."""
        width = height = None
        proc = run(['identify', path], capture_output=True, check=True, encoding='utf-8')
        for line in proc.stdout.split(os.linesep):
            matched = RE_IDENTIFY.search(line)
            if matched is not None:
                width = int(matched.group(2))
                height = int(matched.group(3))
        if width is None:
            raise Exception('Unable to indentify image file: %s' % path)
        return width, height

    def chop(self, path, base=None):
        """Chop an image."""
        image_width, image_height = self.identify(path)
        width = image_width / self.xgrid
        height = image_height / self.ygrid
        index = 0
        for ygrid in range(self.ygrid):
            y = self.yoffset + (height * ygrid)
            for xgrid in range(self.xgrid):
                index += 1
                x = self.xoffset + (width * xgrid)
                geometry = '%sx%s+%s+%s' % (width, height, x, y)
                if base is None:
                    name = os.path.splitext(os.path.basename(path))[0]
                else:
                    name = base
                path_out = '{name}-{index}.png'.format(name=name, index=index)
                info(path_out)
                cmd = 'convert {path} -crop {geometry} {path_out}'.format(
                    path=path, geometry=geometry, path_out=path_out)
                if self.dry_run:
                    print(cmd)
                else:
                    if os.system(cmd) != 0:
                        abort('Crop operation failed.')


def chop(input_images: Sequence[str],
         xgrid: int,
         ygrid: int,
         xoffset: Optional[int],
         yoffset: Optional[int],
         output_base: Optional[str],
         dry_run: bool,
         ):
    """
    Command to chop an image.

    :param input_images: input images
    :param xgrid: x grid size
    :param ygrid: y grid size
    :param xoffset: optional x offset
    :param yoffset: optional y offset
    :param output_base: optional custom base output name
    :param dry_run: avoid destructive changes if True
    """
    chopper = Chopper(xgrid,
                      ygrid,
                      xoffset,
                      yoffset,
                      dry_run)
    for input_image in input_images:
        for path in glob.glob(os.path.expanduser(os.path.expandvars(input_image))):
            if os.path.exists(path):
                proc = run(['identify', input_image],
                           capture_output=True, check=True, encoding='utf-8')
                for line in proc.stdout.split(os.linesep):
                    matched = RE_IDENTIFY.search(line)
                    if matched is not None:
                        chopper.chop(path, base=output_base)
                    else:
                        error(line)


def ios_icons(input_images: Sequence[str],
              output_base: Optional[str],
              dry_run: bool,
              ):
    """
    Command to convert to iOS icons.

    :param input_images: input images
    :param output_base: optional custom base output name
    :param dry_run: avoid destructive changes if True
    """
    for input_image in input_images:
        for path in glob.glob(os.path.expanduser(os.path.expandvars(input_image))):
            if os.path.exists(path):
                if output_base is None:
                    basename = os.path.splitext(os.path.basename(path))[0]
                else:
                    basename = output_base
                resize_ios_icon(path, basename, 29, dry_run,
                                'ipad-settings-1x')
                resize_ios_icon(path, basename, 40, dry_run,
                                'ipad-spotlight-1x')
                resize_ios_icon(path, basename, 58, dry_run,
                                'iphone-settings-2x', 'ipad-settings-2x')
                resize_ios_icon(path, basename, 76, dry_run,
                                'ipad-app-1x')
                resize_ios_icon(path, basename, 80, dry_run,
                                'iphone-spotlight-2x', 'ipad-spotlight-2x')
                resize_ios_icon(path, basename, 87, dry_run,
                                'iphone-settings-3x')
                resize_ios_icon(path, basename, 120, dry_run,
                                'iphone-spotlight-3x', 'iphone-app-2x')
                resize_ios_icon(path, basename, 152, dry_run,
                                'ipad-app-2x')
                resize_ios_icon(path, basename, 180, dry_run,
                                'iphone-app-3x')


def resize_ios_icon(path: str,
                    basename: str,
                    pixels: int,
                    dry_run: bool,
                    *copies: str,
                    ):
    """Resize an iOS icon."""
    for copy in copies:
        output = '{basename}-{copy}.png'.format(basename=basename, copy=copy)
        resize_command = (
            'convert -resize {pixels}x{pixels} {path} {output}'.format(
                pixels=pixels, path=path, output=output))
        if dry_run:
            print(resize_command)
        else:
            print(output)
            os.system(resize_command)


def favicon(image_path: str,
            favicon_path: str,
            dry_run: bool,
            ):
    """
    Create favicon.ico from png file.
    """
    favicon_command = (f'convert "{image_path}" -background white'
                       r' \( -clone 0 -resize 16x16 -extent 16x16 \)'
                       r' \( -clone 0 -resize 32x32 -extent 32x32 \)'
                       r' \( -clone 0 -resize 48x48 -extent 48x48 \)'
                       r' \( -clone 0 -resize 64x64 -extent 64x64 \)'
                       f' -delete 0 -alpha off -colors 256 {favicon_path}')
    if dry_run:
        print(favicon_command)
    else:
        if not os.path.exists(image_path):
            abort(f'Source image path does not exist: {image_path}')
        if os.path.exists(favicon_path):
            abort(f'Favicon target path exists: {favicon_path}')
        print(f'Creating favicon from "{image_path}": {favicon_path}')
        os.system(favicon_command)


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Assorted image file operations.')
    parser.add_argument('-n', '--dry-run', dest='DRY_RUN', help='enable dry run')
    command_parsers = parser.add_subparsers(dest='COMMAND', help='', title='sub-commands')
    chop_parser = command_parsers.add_parser(
        'chop',
        description='Chop up one or more images based on a grid specification.',
    )
    chop_parser.add_argument(dest='XGRID', help='number of X grid elements')
    chop_parser.add_argument(dest='YGRID', help='number of Y grid elements')
    chop_parser.add_argument(dest='INPUT_IMAGE', nargs='+',
                             help='image file path or wildcard pattern')
    chop_parser.add_argument('-x', '--x-offset', dest='XOFFSET', type=int, default=0,
                             help='X offset')
    chop_parser.add_argument('-y', '--y-offset', dest='YOFFSET', type=int, default=0,
                             help='Y offset')
    chop_parser.add_argument('-o', '--output-base', dest='OUTPUT_BASE',
                             help='custom base name for output files')
    ios_icons_parser = command_parsers.add_parser(
        'ios-icons',
        description='Create iOS icon set from source image(s).',
        epilog='Uses the input file base name as the output file base name.',
    )
    ios_icons_parser.add_argument(dest='INPUT_IMAGE', nargs='+',
                                  help='image file path or wildcard pattern'),
    ios_icons_parser.add_argument('-o', '--output-base', dest='OUTPUT_BASE',
                                  help='custom base name for output files'),
    favicon_parser = command_parsers.add_parser(
        'favicon',
        description='Create favicon from source image.',
    )
    favicon_parser.add_argument(dest='INPUT_IMAGE', nargs=1,
                                help='source image file path')
    favicon_parser.add_argument(dest='OUTPUT_PATH', nargs=1,
                                help='favicon output path')
    args = parser.parse_args()
    if args.COMMAND == 'chop':
        chop(args.INPUT_IMAGE,
             args.XGRID,
             args.YGRID,
             args.XOFFSET,
             args.YOFFSET,
             args.OUTPUT_BASE,
             args.DRY_RUN)
    elif args.COMMAND == 'ios-icons':
        ios_icons(args.INPUT_IMAGE,
                  args.OUTPUT_BASE,
                  args.DRY_RUN)
    elif args.COMMAND == 'favicon':
        favicon(args.INPUT_IMAGE[0],
                args.OUTPUT_PATH[0],
                args.DRY_RUN)


if __name__ == '__main__':
    main()
