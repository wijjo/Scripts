#!/usr/bin/env python
# Copyright 2016-17 Steven Cooper
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Perform various image manipulations using ImageMagick."""

import os
import glob
import re

#pylint: disable=unused-import,import-error
from lib import import_scriptbase
from scriptbase import cli, console, command

# Matches identity output without the file name at the front.
RE_IDENTIFY = re.compile(r'(\w+)\s+(\d+)x(\d+)\s+(\d+)x(\d+)[+](\d+)[+](\d+)\s+.*', re.IGNORECASE)

class Chopper(object):
    """Image chopper."""

    def __init__(self, xgrid, ygrid, xoffset, yoffset, dryrun): #pylint: disable=too-many-arguments
        """Chopper constructor."""
        self.xgrid = xgrid
        self.ygrid = ygrid
        self.xoffset = xoffset
        self.yoffset = yoffset
        self.dryrun = dryrun

    @classmethod
    def identify(cls, path):
        """Identify an image."""
        width = height = None
        with command.Command('identify', path) as cmd:
            for line in cmd:
                matched = RE_IDENTIFY.search(line)
                if not matched is None:
                    width = int(matched.group(2))
                    height = int(matched.group(3))
            if width is None:
                raise Exception('Unable to indentify image file: %s' % path)
        return (width, height)


    def chop(self, path, base=None):                            #pylint: disable=too-many-locals
        """Chop an image."""
        (image_width, image_height) = self.identify(path)
        width = image_width / self.xgrid
        height = image_height / self.ygrid
        index = 0
        #pylint: disable=invalid-name
        for ygrid in range(self.ygrid):
            y = self.yoffset + (height * ygrid)
            for xgrid in range(self.xgrid):
                index += 1
                x = self.xoffset + (width * xgrid)
                geometry = '%sx%s+%s+%s' % (width, height, x, y)
                if base is None:
                    name = os.path.splitext(os.path.basename(path))[0]
                else:
                    name = base
                path_out = '{name}-{index}.png'.format(name=name, index=index)
                console.info(path_out)
                cmd = 'convert {path} -crop {geometry} {path_out}'.format(
                    path=path, geometry=geometry, path_out=path_out)
                if self.dryrun:
                    print(cmd)
                else:
                    if os.system(cmd) != 0:
                        console.abort('Crop operation failed.')

@cli.Command(
    description='Chop up one or more images based on a grid specification.',
    args=[
        cli.Integer('xgrid', 'number of X grid elements'),
        cli.Integer('ygrid', 'number of Y grid elements'),
        cli.String('input_image', 'image file path or wildcard pattern', nargs='+'),
        cli.Integer('xoffset', 'X offset', '-x', '--x-offset', default=0),
        cli.Integer('yoffset', 'Y offset', '-y', '--y-offset', default=0),
        cli.String('output_base', 'custom base name for output files', '-o', '--output-base'),
    ],
)
def chop(runner):
    """Command to chop an image."""
    chopper = Chopper(runner.arg.xgrid,
                      runner.arg.ygrid,
                      runner.arg.xoffset,
                      runner.arg.yoffset,
                      runner.arg.dryrun)
    for arg in runner.arg.input_image:
        for path in glob.glob(os.path.expanduser(os.path.expandvars(arg))):
            if os.path.exists(path):
                with command.Command('identify', arg) as cmd:
                    for line in cmd:
                        matched = RE_IDENTIFY.search(line)
                        if not matched is None:
                            chopper.chop(path, base=runner.arg.output_base)
                        else:
                            console.error(line)

@cli.Command(
    name='ios-icons',
    description='''\
Create iOS icon set from source image(s).
Uses the input file base name as the output file base name.''',
    args=[
        cli.String('input_image', 'image file path or wildcard pattern', nargs='+'),
        cli.String('output_base', 'custom base name for output files', '-o', '--output-base'),
    ],
)
def ios_icons(runner):
    """Command to convert to iOS icons."""
    for arg in runner.arg.input_image:
        for path in glob.glob(os.path.expanduser(os.path.expandvars(arg))):
            if os.path.exists(path):
                if runner.arg.output_base is None:
                    basename = os.path.splitext(os.path.basename(path))[0]
                else:
                    basename = runner.arg.output_base
                resize_ios_icon(path, basename, 29, runner.args.dryrun,
                                'ipad-settings-1x')
                resize_ios_icon(path, basename, 40, runner.args.dryrun,
                                'ipad-spotlight-1x')
                resize_ios_icon(path, basename, 58, runner.args.dryrun,
                                'iphone-settings-2x', 'ipad-settings-2x')
                resize_ios_icon(path, basename, 76, runner.args.dryrun,
                                'ipad-app-1x')
                resize_ios_icon(path, basename, 80, runner.args.dryrun,
                                'iphone-spotlight-2x', 'ipad-spotlight-2x')
                resize_ios_icon(path, basename, 87, runner.args.dryrun,
                                'iphone-settings-3x')
                resize_ios_icon(path, basename, 120, runner.args.dryrun,
                                'iphone-spotlight-3x', 'iphone-app-2x')
                resize_ios_icon(path, basename, 152, runner.args.dryrun,
                                'ipad-app-2x')
                resize_ios_icon(path, basename, 180, runner.args.dryrun,
                                'runner.args.dryrun, iphone-app-3x')


def resize_ios_icon(path, basename, pixels, dryrun, *copies):
    """Resize an iOS icon."""
    for copy in copies:
        output = '{basename}-{copy}.png'.format(basename=basename, copy=copy)
        resize_command = (
            'convert -resize {pixels}x{pixels} {path} {output}'.format(
                pixels=pixels, path=path, output=output))
        if dryrun:
            print(resize_command)
        else:
            print(output)
            os.system(resize_command)


@cli.Main(
    description='Assorted image file operations.',
    support_verbose=True,
    support_dryrun=True,
)
def main(runner):
    """Main function."""
    console.set_verbose(runner.arg.verbose)


if __name__ == '__main__':
    cli.main()
