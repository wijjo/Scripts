#!/usr/bin/env python3
# Copyright 2016-17 Steven Cooper
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Run pylint on all contained Python source files."""

import sys
import os
import re
from argparse import ArgumentParser

BASE_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
PACKAGE_BASE_FILE_NAMES = set(['__init__.py'])
RE_PYTHON_SHEBANG = re.compile(r'^#!.*\bpython.*$')
RE_SKIPPED_SUB_DIR_NAMES = [
    re.compile('^%s$' % pat) for pat in (
        '[.].*',
        '__.*',
        'deprecated',
    )
]
PATH_PREFIX_TO_STRIP = '.%s' % os.path.sep

sys.path.insert(0, os.path.join(BASE_DIR, 'ext', 'scriptbase'))
#pylint: disable=import-error
from scriptbase import command
from scriptbase import shell


def is_python(path):
    """Return True if the path is a Python script."""
    if os.path.isfile(path):
        if os.path.splitext(path)[1] == '.py':
            return True
        try:
            with open(path) as file_handle:
                for line in file_handle:
                    if RE_PYTHON_SHEBANG.match(line):
                        return True
                    break
        except (IOError, OSError) as exc:
            print('** error reading %s - %s **' % (path, str(exc)))
            sys.exit(255)
        except (UnicodeDecodeError):
            pass
    return False


def iter_python_files(dir_path, file_names):
    """Generate paths for Python files in a directory."""
    for file_name in file_names:
        file_path = os.path.join(dir_path, file_name)
        if is_python(file_path):
            yield file_name


def is_submodule(dir_path):
    """Return True if the path is a Git submodule."""
    return os.path.exists(os.path.join(dir_path, '.git'))


def walk_targets(*base_dir_paths):
    """Generate target Python source files."""
    # Look at all the base directories.
    for base_dir_path in base_dir_paths:
        # Walk the tree under a base directory.
        for dir_path, sub_dir_names, file_names, in os.walk(base_dir_path):
            # Strip any leading "./" from the directory path.
            if dir_path.startswith(PATH_PREFIX_TO_STRIP):
                dir_path = dir_path[len(PATH_PREFIX_TO_STRIP):]
            # Yield only the directory if it's a package.
            if set(file_names).intersection(PACKAGE_BASE_FILE_NAMES):
                yield dir_path, None
                sub_dir_names[:] = []
                continue
            # Ignore Git submodules.
            if dir_path != base_dir_path and is_submodule(dir_path):
                sub_dir_names[:] = []
                continue
            # Yield the directory and source files to check, if there are any.
            to_delete = []
            for index, sub_dir_name in enumerate(sub_dir_names):
                for re_skipped in RE_SKIPPED_SUB_DIR_NAMES:
                    if re_skipped.match(sub_dir_name):
                        to_delete.append(index)
            for to_delete_index in reversed(to_delete):
                del sub_dir_names[to_delete_index]
            file_names = list(iter_python_files(dir_path, file_names))
            if file_names:
                yield dir_path, file_names


def files_display_string(dir_path, file_names):
    """Return a display string for a directory and its Python source files."""
    def _display_strings(dir_path, file_names):
        yield '%s:' % shell.quote_argument(dir_path)
        if file_names:
            for file_name in file_names:
                yield shell.quote_argument(file_name)
    return ' '.join(_display_strings(dir_path, file_names))


def get_pylint_command_arguments(dir_path, file_names):
    """Return pylint command arguments for a directory and source files."""
    pylint_args = ['pylint', '-r', 'n', '-s', 'n']
    if file_names:
        for file_name in file_names:
            pylint_args.append(os.path.join(dir_path, file_name))
    else:
        pylint_args.append(dir_path)
    return pylint_args


def list_targets_generator(dir_path, file_names):
    """Python generator to generate target list output lines."""
    yield files_display_string(dir_path, file_names)


def pylint_run_generator(dir_path, file_names):
    """Python generator to generate pylint output lines."""
    pylint_args = get_pylint_command_arguments(dir_path, file_names)
    with command.Command(*pylint_args) as cmd:
        lines = cmd.read_lines()
    if cmd.return_code != 0:
        files_string = files_display_string(dir_path, file_names)
        yield ''
        yield ('::: %s :::' % files_string)
        yield ''
        for line in lines:
            yield line


def pylint_dry_run_generator(dir_path, file_names):
    """Python generator to generate pylint command lines."""
    pylint_args = get_pylint_command_arguments(dir_path, file_names)
    yield shell.quote_arguments(*pylint_args)


def get_generator(list_targets, dry_run):
    """Choose an output generator based on the enabled options."""
    if list_targets:
        return list_targets_generator
    if dry_run:
        return pylint_dry_run_generator
    return pylint_run_generator


def main():
    """Main function with the target processing loop."""
    try:
        parser = ArgumentParser(description='Find Python source files and run pylint on them.')
        parser.add_argument('-l', '--list-targets', dest='list_targets', action='store_true',
                            default=False, help='list targets without running pylint')
        parser.add_argument('-n', '--dry-run', dest='dry_run', action='store_true',
                            default=False, help='display pylint commands instead of running them')
        parser.add_argument(dest='directories', nargs='*', default=['.'],
                            help="root directories for source files (default='.')")
        args = parser.parse_args()
        os.chdir(BASE_DIR)
        generator = get_generator(args.list_targets, args.dry_run)
        for dir_path, file_names in walk_targets(*args.directories):
            for line in generator(dir_path, file_names):
                print(line)
    except KeyboardInterrupt:
        sys.exit(2)


if __name__ == '__main__':
    main()
